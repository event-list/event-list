"""All queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  user: User
  events(after: String, first: Int, before: String, last: Int): EventConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Party list User"""
type User {
  """The ID of an object"""
  id: ID!
  email: String!
  name: String!
  gender: String!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge"""
  node: Event

  """A cursor for use in pagination"""
  cursor: String!
}

"""Event Type"""
type Event implements Node {
  """The ID of an object"""
  id: ID!
  title: String
  description: String
  slug: String
  flyer: String
  label: String
  published: Boolean
  date: String
  eventOpenAt: String
  eventEndAt: String
  listAvailableAt: String
  classification: String
  price: String
}

"""All mutations"""
type Mutation {
  CreateEventMutation(input: CreateEventMutationInput!): CreateEventMutationPayload
  UserSignUpMutation(input: UserSignUpMutationInput!): UserSignUpMutationPayload
  UserSignInMutation(input: UserSignInMutationInput!): UserSignInMutationPayload
  UserSignOutMutation(input: UserSignOutMutationInput!): UserSignOutMutationPayload
}

type CreateEventMutationPayload {
  eventEdge: EventEdge

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

"""
An object containing an error message and the field the error belongs to
"""
type FieldError {
  field: String
  message: String
}

input CreateEventMutationInput {
  title: String!
  description: String!
  label: String!
  flyer: String!
  date: String!
  eventOpenAt: String!
  eventEndAt: String!
  listAvailableAt: String!
  classification: String!
  price: String!
  clientMutationId: String
}

type UserSignUpMutationPayload {
  user: User
  token: String

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

input UserSignUpMutationInput {
  name: String!
  email: String!
  password: String!
  gender: String!
  clientMutationId: String
}

type UserSignInMutationPayload {
  user: User

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

input UserSignInMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignOutMutationPayload {
  """Default success field resolver."""
  success: String

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input UserSignOutMutationInput {
  clientMutationId: String
}