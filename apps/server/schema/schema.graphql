# All queries
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
  user: UserConnection!
  events(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): EventConnection!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

# Party list User
type User {
  # The ID of an object
  id: ID!
  email: String!
  name: String!
  gender: String!
}

# A connection to a list of items.
type EventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventEdge]
}

# An edge in a connection.
type EventEdge {
  # The item at the end of the edge
  node: Event

  # A cursor for use in pagination
  cursor: String!
}

# Event Type
type Event {
  # The ID of an object
  id: ID!
  title: String
  description: String
  slug: String
  label: String
  published: Boolean
  date: String
  eventOpenAt: String
  eventEndAt: String
  listAvailableAt: String
  classification: String
  price: String
}

# All mutations
type Mutation {
  CreateEvent(input: CreateEventInput!): CreateEventPayload
  UserRegisterMutation(input: UserRegisterMutationInput!): UserRegisterMutationPayload
  UserLoginMutation(input: UserLoginMutationInput!): UserLoginMutationPayload
}

type CreateEventPayload {
  eventEdge: EventEdge

  # Default success field resolver.
  success: String
  error: FieldError
  clientMutationId: String
}

# An object containing an error message and the field the error belongs to
type FieldError {
  field: String
  message: String
}

input CreateEventInput {
  title: String!
  description: String!
  label: String!
  date: String!
  eventOpenAt: String!
  eventEndAt: String!
  listAvailableAt: String!
  classification: String!
  price: String!
  clientMutationId: String
}

type UserRegisterMutationPayload {
  user: User
  token: String

  # Default success field resolver.
  success: String
  error: FieldError
  clientMutationId: String
}

input UserRegisterMutationInput {
  name: String!
  email: String!
  password: String!
  gender: String!
  clientMutationId: String
}

type UserLoginMutationPayload {
  user: User

  # Default success field resolver.
  success: String
  error: FieldError
  clientMutationId: String
}

input UserLoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}
